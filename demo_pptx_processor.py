# %%[markdown]
# # PPTX Processor Comprehensive Demo
# 
# This notebook showcases all the features of the new PPTX processor for the attachments library.
# 
# ## Features Demonstrated:
# - Multiple text formats: markdown (default), plain, xml
# - Format aliases: text=plain, txt=plain, md=markdown, code=xml  
# - Page/slide selection: [pages:1-3,5]
# - Image control: [images:true|false]
# - Combined DSL commands for precise control
# - Proper type dispatch with @presenter decorators
# - Integration with existing refine pipeline

# %%
from attachments import Attachments, data

# %%[markdown]
# ## 1. Default Markdown Format (with images)
# 
# The default behavior extracts text in markdown format and includes images from slides.

# %%
ctx1 = Attachments(data.get_sample_path('sample_multipage.pptx'))
len(ctx1.text), len(ctx1.images)

# %%
print(ctx1.text[:500])


#%%
from IPython.display import HTML
HTML(f"<img src='{ctx1.images[0]}'>")


# %%[markdown]
# ## 2. Plain Text Format
# 
# Using `[format:plain]` extracts clean text with slide markers.

# %%
ctx2 = Attachments(data.get_sample_path('sample_multipage.pptx[format:plain]'))
len(ctx2.text)

# %%
print(ctx2.text[:500])

# %%[markdown]
# ## 3. XML Format (Raw PPTX Structure)
# 
# Using `[format:xml]` extracts the raw XML structure from the PPTX file for detailed analysis.

# %%
ctx3 = Attachments(data.get_sample_path('sample_multipage.pptx[format:xml][pages:1]'))
len(ctx3.text), "```xml" in ctx3.text, "<!-- Slide 1 XML -->" in ctx3.text

# %%
print(ctx3.text[:800])

# %%[markdown]
# ## 4. Page Selection
# 
# Using `[pages:1-2]` processes only specific slides.

# %%
ctx4 = Attachments(data.get_sample_path('sample_multipage.pptx[pages:1-2]'))
len(ctx4.text), "## Slide 1" in ctx4.text, "## Slide 2" in ctx4.text, "## Slide 3" in ctx4.text

# %%
print(ctx4.text)


# %%[markdown]
# ## 5. Image Control
# 
# Using `[images:false]` disables image extraction.

# %%
ctx5 = Attachments(data.get_sample_path('sample_multipage.pptx[images:false]'))
len(ctx5.text), len(ctx5.images)

# %%[markdown]
# ## 6. Format Aliases
# 
# The processor supports convenient aliases for format commands.

# %%
ctx6a = Attachments(data.get_sample_path('sample_multipage.pptx[format:text][pages:1]'))
ctx6b = Attachments(data.get_sample_path('sample_multipage.pptx[format:code][pages:1]'))
len(ctx6a.text), len(ctx6b.text)

# %%
ctx6a.text[:300]

# %%
ctx6b.text[:400]

# %%[markdown]
# ## 7. Combined DSL Commands
# 
# Multiple DSL commands can be combined for precise control.

# %%
ctx7 = Attachments(data.get_sample_path('sample_multipage.pptx[format:plain][pages:1-2][images:false]'))
len(ctx7.text), len(ctx7.images)

# %%
ctx7.text


# %%[markdown]
# ## 8. Processor Registration Test
# 
# Verify that the PPTX processor is properly registered.

# %%
from attachments.pipelines import processors
dir(processors)

# %%
"pptx_to_llm" in dir(processors)

# %%[markdown]
# ## 9. Metadata Analysis
# 
# Let's examine the metadata generated by the processor.

# %%
ctx_meta = Attachments(data.get_sample_path('sample_multipage.pptx[pages:1-3]'))
import json
print(json.dumps(ctx_meta.metadata, indent=2, default=str))

# %%[markdown]
# ## Summary
# 
# The PPTX processor successfully provides:
# 
# ✓ Multiple text formats: markdown (default), plain, xml  
# ✓ Format aliases: text=plain, txt=plain, md=markdown, code=xml  
# ✓ Page/slide selection: [pages:1-3,5]  
# ✓ Image control: [images:true|false]  
# ✓ Combined DSL commands for precise control  
# ✓ Proper type dispatch with @presenter decorators  
# ✓ Integration with existing refine pipeline (resize_images, tile_images)  
# ✓ Automatic processor registration and discovery 